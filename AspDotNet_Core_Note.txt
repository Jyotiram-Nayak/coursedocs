=====================Website Links=====================
dotNet Community
https://dotnet.microsoft.com/en-us/platform/community
https://aka.ms/ef-core-connection-strings

========================================================================================================================================================

program.cs
================================================================================
## the program.cs file is merge of both startup.cs file and program.cs file from erlier version
## builder object expose the same services which is use to resive by Startup(ConfigureServices)
## using builder object you can add your own services addition,external services

## use those services by using the app instance
## exactly what we were doing in configure function that use those services like routing static fils or even end points all need to be done using the app instance

example 
========================================
-- add services 
-- middleware
-- dipendency injector
========================================================================================================================================================
=====================ERROR======================
Severity Code Description Project File Line Suppression State  in dotnet core 8 
Error CS1061 'DbContextOptionsBuilder' does not contain a definition for 'UseSqlServer' and no accessible extension method 'UseSqlServer' accepting a first argument of type 'DbContextOptionsBuilder' could be found (are you missing a using directive or an assembly reference?)
====================SOLUTION====================
## Run the following command in the NuGet Package Manager Console:
-- Install-Package Microsoft.EntityFrameworkCore.SqlServer 

## Make sure you have the correct using directive for Entity Framework Core
## using Microsoft.EntityFrameworkCore;

================================================================================

========================================================================================================================================================
## Keybord shortcuts visual studio 2022
-------------------------------------------------------
CTRL + M plus CTRL + O to collapse all regions non-recursively
CTRL + K plus CTRL + D to code formating
CTRL + K plus CTRL + C to comment any line
CTRL + K plus CTRL + U to uncomment any line
CTRL + SHIFT + A to add new item 
========================================================================================================================================================

## Introduction
-------------------------------------------------------
• Nowadays, everyone is talking about open source, cross platform development.
• Microsoft has always been known for its Windows based products, but now we are in the new age of development. 
• For this, a new revolutionary product came into the market, which is Microsoft NET Core.
• NET Core is a free open source and cross platform framework, created for building modern Cloud based Applications and every
• NET developer feels proud of it.
• Now, there are no boundaries for the platform. Now, every NET developer can say, yes I am platform independent, l am using an open source.

## create project using CLI
--------------------------
## it will display some Template Name 
-- dotnet new list

## in this example we use MVC Template
## after that write the project name as your choice
-- dotnet new mvc --name MyFirstWeb

## to run any project using cli type this
-- dotnet watch
or 
-- dotnet run


Add migration
--------------------------
-- Add-Migration InitialCreate
-- Update-Database

Step to create a ASP.Net Core EntityFramework project
-------------------------------------------------------
# create a core project with mvc
# How to Create a SQLite Database with Entity Framework Core in an ASP.NET Core MVC 

## change table name 
## override this method to change table name
-- protected override void OnModelCreating(ModelBuilder modelBuilder)
-- {
--     modelBuilder.Entity<Student>().ToTable("Student_Table");
--     modelBuilder.Entity<StudentCourse>().ToTable("StudentCourse_Table");
--     modelBuilder.Entity<Course>().ToTable("Course_Table");
-- }



## Step to convert console app into web application
-------------------------------------------------------
# Update SDK in csproj
# Update output type in csproj
# Add Web WebHostBuilder
# Add routing
# Setup default route


## CreateDefaultBuilder
-------------------------------------------------------
-- Dependency Injection (DI)
-- Configuration
-- appSettings.json
-- appSettings.{env}.json
-- User secrets
-- Environment variables

========================================================================================================================================================

## Route (two type of  routing)
-------------------------------------------------------
## we can use both Convention Route and attribute Route in a single application

1. Convention Based Route
## fisrt we have to add this services befoure create the builder.build() instance
-- builder.Services.AddControllersWithViews();

## using MapDefaultControllerRoute middleware we can add the default route
## controller actions to the <see cref="IEndpointRouteBuilder"/> and adds the default route
## {controller=Home}/{action=Index}/{id?}
-- app.MapDefaultControllerRoute();

-- app.MapControllerRoute(
--   name:"default",
--   pattern:"{controller=Student}/{action=Index}/{id?}"
-- );

2. Attibute Based Route
## fisrt we have to add this services befoure create the builder.build() instance
-- builder.Services.AddControllersWithViews();

## then use this middleware 
## using this middleware we can implement the attribute routing
-- app.MapControllers();

## to use attribute route we have to add route attribute befoure the action method
example
---------------------------
[Route("")]
[Route("Home")]
[Route("Home/Index")]
public IActionResult Index()         ## Action Method
{
    return View();
}

## we can use tokens for route
[controller] ## Token for Controller 
[action]  ## Token for Action
## we can use both token together

## Route constraints
## Type: int, bool, datetime, double, float etc
## Min: min(number)                 ## minimum value that require
## Max: max(number)                 ## maximum value that require
## MinLength: minlength(10)
## MaxLength: maxlength(20)
## Length: length (15)
## Range: range(10,15)
## Alpha: alpha, There must only be the alphabetical character.  ## must be alfabetic character require
## Required: required
## Regex: regex(expression)
-- [Route("{name:regex(a(b|c))}")]


## by default parameter value are string
 

## example
-------------------------------------------------------
-- [Route("{id:int:min(10):max(100)}")]
-- public string SelectAllEmployee(int id)
-- {
--     return "Employees id is " + id;
-- }
-- [Route("{name}")]
-- public string SelectAllEmployee(string name)
-- {
--     return "Employees name is "+ name;
-- }
-- [Route("{name:regex(a(b|c))}")]
-- public string getByRegex(string name)
-- {
--     return "Employees name is " + name;
-- }
-------------------------------------------------------

## http Methods
-------------------------------------------------------
## Map method is use for genral perpose all type of http request

========================================================================================================================================================

## Passing Data from Controller to View using object
-------------------------------------------------------
## ViewData 
-----------------
## ViewData is dictionary of object that is derived from ViewDataDictionary class
## Syntax 
-- ViewData["Key"] = "Value";

## Passing data from controller
-- ViewData["name"] = "Jyotiram";
-- ViewData["age"] = 22;
-- string[] subject= ["Asp.net", "PHP"];
-- ViewData["subject"] = subject;

## Diplay in View
@{
    foreach (var item in (string[])ViewData["subject"])
    {
        <h2>@item</h2>
    }
}

## ViewBag
-----------------
## Syntax 
-- ViewBag.property = "Value";

-- VuewBag.name = "Jyotiram";
-- VuewBag.age = 22;
-- string[] subject= ["Asp.net", "PHP"];
-- VuewBag.subject = subject;

## Diplay in View
@ViewBag.subject 
@{
    foreach (var item in ViewBag.subject) ##no need to typecast
    {
        <h2>@item</h2>
    }
}

## TempData
-----------------
## TempData stores data as key value pairs.
## Temp Data Value mustbe typecast befoure use
## TempData is accessible in current or subsequent request
## you can only one time TempData 
## Call TempData.keep() method to keep all the value of temp data.

## Strongly Typed Views
-----------------
## Strongly typed view or strongly typed object is used to pass data from controller to a view.
## The view which binds with any model is called as strongly typed view.
## You can bind any class as a model to view.
## You can access model properties on that view.
## You can use data associated with model to render controls.

## The view that is designed by targeting specific model class object then that view is called "Strongly Typed View".
## In strongly typed view, view is bind with corresponding model class object or list of objects.


## How to Install Client side Library like bootstrap, tailwind, jquery in Asp.net 
-------------------------------------------------------
## All Static Files like bootstrap, css, js, jquery are placed inside wwwroot folder.
## Images folder is also placed in wwwroot folder
## app.UseStaticFiles(); without this method you cannot access static files like bootstrap, css, js, jquery etc.


## _ViewImport.cshtml
-------------------------------------------------------
## In ASP.NET Core MVC Application, the _ViewImports.chtml file provides a mechanism to include the directives globally
    for Razor Pages / Views so that we don't have to add them individually in each and every page.

## ViewImports.chtml file supports the following directives:
## @addTagHelper
## @tagHelperPrefix
## @removeTagHelper
## @namespace
## @inject
## @model
## @using

## Tag Helper
-------------------------------------------------------
## Tag helpers are basically special attributes provided by Asp.net Core.
## Tag Helpers enable server-side components to participate in creating and rendering HTML elements in Views.
## Tag helpers are a new feature and similar to HTML helpers (MVC 5), which help us render HTML.
## Before start working with tag helpers, make sure you have included namespace for tag helpers in your ViewImports file.
## Microsoft.AspNetCore.Mvc.TagHelpers.
## Add this line in in your Viewlmports file.
## @addTagHelper * Microsoft.AspNetCore.Mvc.TagHelpers


## Tag Helper examples
-----------------
-- <a href="/Home/AboutUs">AboutUs</a>
-- @Html.ActionLink("Contact Page","Contact","Home");
-- <a href="@Url.Action("AboutUs","Home")">AboutUs</a>
-- <a asp-controller="Home" asp-action="Contact">Contact Page</a>

## Image Tag Helper
-----------------
## In order to use the Image Tag Helper in ASP.NET Core Application, you need to add the asp-append-version attribute to the
<img> tag and need to set the value to true.

## Input Tag Helper
-------------------------------------------------------
## The asp-for attribute is arguably one of the most common tag helpers that you'll encounter, and its
    primary purpose is to handle binding a specific property to the element that it decorates.
## asp-for tag helper is used for an <input>, it sets the name attribute, so that it can be bound to model class.
## e.g. asp-for="Movie.Year" when retrieving data from a POST request.
## asp-for sets the id, name and validation related attributes.

## example
-----------------
<form class="d-grid" asp-action="Form" asp-controller="Home" method="post">
    <input asp-for="Id" class="form-control" placeholder="Enter RollNo" />
    <br />
    <input asp-for="Name" class="form-control" placeholder="Enter Name" />
    <br />
    <select asp-items="Html.GetEnumSelectList<Gender>()" class="form-control">
        <option value="">Select Gender</option>
    </select>
    <br />
    <input asp-for="Age" class="form-control" placeholder="Enter Gender" />
    <br />
    <input asp-for="Salary" class="form-control" placeholder="Enter Standard" />
    <br />
    <input type="submit" class="btn btn-outline-primary btn-block" />
</form>

## Browser cache 
-------------------------------------------------------
## In general, when you visit a web page and if that web page contains some image, then most of the modern web browser cache the images for later use.
## In the future, when you revisit to that web precise then the browser loads the images from cache instead of downloading the images from the server.
## In most of the caches, this is not an issue as the images are not changes that often for a web page.

========================================================================================================================================================
-------------------Model Validation-------------------
-------------------------------------------------------
## The ASP.NET Core gives us Model Validator, which uses the validation attributes to validate the model, which makes our task easier.
## We also take a look at ModelState and how to use it. Finally, we look at the list of Validation attributes.

## The Form Data is posted to Controller action is automatically mapped to the action parameter by the Model Binder. We already looked at how Model Binding works in ASP.NET Core.
## The Model needs to be validated for the correctness.
## These validations can be done at the client side before sending data to the server or at the server side when the data is received from the client.

## We learnt how Model binding works in ASP.NET Core applications. When the HTTP Request arrives Model binder is invoked before passing the control to controller action method.
## The Model binder not only binds the value to the action parameter but also validates them by using the Model Validator.

## The Model Validator runs after the model binding and runs a series of validations on each property of 
    the model based on the attributes that you set on the model property.
## These attributes are called Validation attributes and contain the code, which is used by the Model Validator to validate the model. 
## [Required]
## [StringLength]
## [EmailAddress]
## [Range]
## [RegularExpression]
## [Compare]
## [Phone]
## [Url]

RegularExpression
-----------------
## email 
-- "^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$"

examples
-----------------
-- [Required(ErrorMessage = "Plese enter Id")]
-- [StringLength(15,MinimumLength =3,ErrorMessage = "Name is must be 3 to 15 char")]
-- [RegularExpression(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$", ErrorMessage ="Invalid Emial")]
-- [Range(10,50,ErrorMessage ="Age is must be 10 to 50")]


Validation Tag Helper
-------------------------------------------------------
## There are 2 validation tag helpers in asp.net core mvc
## Validation Message Tag Helper: It displays the validation message for a single property of a Model. 
-- E-g: asp-validation-for
## Validation Summary Tag Helper: It displays a summary of validation messages for all the properties of a Model.
-- E-q: asp-validation-summary


## Entity Framework
-------------------------------------------------------
## To address the data access requirements of ASP.NET CORE MVC application, you can use an ORM (OBJECT RELATIONAL MAPPING) framework.

## Simplifies the process of accessing data from applications.
## ORM is a tool for storing data from domain objects to relational database.

## Entity Framework Core is the new version of Entity Framework after EF 6 but it is redesigned.
## It is open-source, lightweight, extensible and a cross-platform version of Entity Framework.
## Entity Framework Core is a data access technology.

## Entity Framework is an Object/Relational Mapping (ORM) framework.
## It is an enhancement to ADO.NET that gives developers an automated mechanism for accessing & storing the data in the database.
## EF Core is intended to be used with .NET Core applications. However, it can also be used with standard .NET 4.5+ framework based applications.

EF Core Development Approaches
-----------------
## EF Core supports two development approaches
## 1) Code-First
## 2) Database-First. 

========================================================================================================================================================
-------------------Steps for Code-First approaches-------------------
-------------------------------------------------------
## 1st Step : Install 3 Packages in your ASP.NET Core MVC application.
1. Microsoft.EntityFrameworkCore.Sq|Server
2. Microsoft.EntityFrameworkCore.Tools
## They're primarily used to manage Migrations and to scaffold a DbContext.
3. Microsoft.EntityFrameworkCore.Design
## Microsoft.EntityFrameworkCore.Design contains all the design-time logic for Entity Framework Core.

## 2nd Step:
1) Create a Model Class.
2) Create a DbContext Class.

## Model Class
## example
------------------
public class StudentModel
{
    [Key]                                                   #use for Primary Key
    public int Id { get; set; }
    [Column("StudentName",TypeName ="nvarchar(50)")]
    public string Name { get; set; }                        #use for column name in table
    [Column("StudentGender", TypeName = "nvarchar(20)")]
    public string Gender { get; set; }
    public int Age { get; set; }
}
------------------

## DbContext Class
------------------
## The DbContext class is an integral part of Entity Framework.
## This is the class that we use in our application code to interact with the underlying database.
## It is this class that manages the database connection and is used to retrieve and save data in the database.
## An instance of DbContext represents a session with the database which can be used to query and save instances of your entities to a database.
## DbContext is a combination of the Unit Of Work and Repository patterns. 
## DbContext can be used to define the database context class after creating a model class.
## DbContext co-ordinates with Entity Framework and allows you to query and save the data in the database.
## Uses the DbSet <T> type to define one or more properties where, T represents the type of an object that needs to be stored in the database
## example
------------------
-- public class StudentDBContext:DbContext
-- {
--     public StudentDBContext(DbContextOptions options):base(options)
--     {
--         
--     }
--     public DbSet<Student> Students { get; set; }
-- }
------------------


## DbContextOptions in Entity Framework Core
------------------
## For the DbContext class to be able to do any useful work, it needs an instance of the DbContextOptions class.
## The DbContextOptions instance carries configuration information such as the connection string, database provider to use etc. A

## 3rd Step:
## Create a Connection String in appsettings.json file.

## 4th Step:
## Registering Connection String In Program.cs File.

## 5th Step:
## Add a migration and run the migration.

========================================================================================================================================================
-------------------Steps for Database-First approaches-------------------
-------------------------------------------------------
## In the database-first approach the Entity Framework core creates model classes and properties corresponding to the existing database objects, such as tables and columns.
## The database-first approach is applicable in scenario where a database already exists for the application.

## 1st Step:
## Install 3 1Packages in your ASP.NET Core MVC application.
1. Microsoft.EntityFrameworkCore.Sq|Server
2. Microsoft.EntityFrameworkCore.Tools
3. Microsoft.EntityFrameworkCore.Design


## 2nd Step:
## Execute a command for Scaffold DbContext.
-- Scaffold-DbContext "server=DESKTOP-T68EB1A\SQLEXPRESS;database=Student;trusted_connection=true;TrustServerCertificate=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models
// Server=DESKTOP-T68EB1A\SQLEXPRESS;Database=Student;Trusted_Connection=True;MultipleActiveResultSets=true;Encrypt=True;TrustServerCertificate=True;

Scaffold-DbContext "server=DESKTOP-T68EB1A\SQLEXPRESS;database=BookStore;trusted_connection=true;TrustServerCertificate=true;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models
## If we update our database then how we can update our Model and DbContext.
## By using this command:
-- Scaffold-DbContext "server=ServerName;database=DatabaseName;trusted_connection=true" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -force

Scaffold-DbContext "Server=DESKTOP-T68EB1A\SQLEXPRESS;Database=BookStore;TrustedConnection=True;TrustServerCertificate=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models
## 3rd Step:
## Move Connection String from DbContext Class To appsettings.json file.


## 4th Step:
## Registering Connection String In Program.cs File.

========================================================================================================================================================
## Session
-------------------------------------------------------
What Is Session ?
## It is a state management technique.
## Session state is an ASP.NET Core scenario for storage of user data while the user browses a web app.
## Session state uses a store maintained by the app to persist data across requests fron a client.
## The session data is backed by a cache considered ephemeral data. 

## Critical application data should be stored in the user database and cached in session only as a performance optimization.
## The session is specific to the browser, Sessions aren't shared across browsers.
## Session are deleted when the browser session ends.
## Sessions are Server-Side.

## Session is also used to pass data within the ASP.NET Core MVC application and unlike TempData.
## It persist for its expiration time (default time is 20 minutes but it can be increased or decreased).

## add timeline to session (Register in Program.cs file)
-- builder.Services.AddSession(options =>
--      options.IdleTimeout = TimeSpan.FromMinutes(10);
-- }) ;

## Session is valid for all requests, not for a single redirect. 
## A session state stores application-specific data in key-value pairs.

## A session state stores user-specific information for an ASP.NET MVC application.
## However, the scope of session state is limited to the current browser session.
## When many users access an application simultaneously, then, each of these users will have a different session state.
## Every session has a unique session id.


-- HttpContext.Session.SetString("MyName", "Jyotiram");
## Get Session Id
-- TempData["SessionID"] = HttpContext.Session.Id;

## Remove Session 
-- HttpContext.Session.Remove("MyName");

Steps
--------------------
## Step:1
## Add below line before build,
-- builder.Services.AddSession();


## Step:2
## Create Session Variable.
-- HttpContext.Session.SetString("MyName", "Jyotiram");
## We can set different type of values in a session.

## Step:3
## Access Session Variable.
-- HttpContext.Session.GetString("MyKey");

-- HttpContext.Session.SetString("MyName", "Jyotiram nayak");

## Step:4
## If you want to access session directly in view, not in action method then you have to use HttpContextAccessor.

## Display in view
-- @using Microsoft.AspNetCore.Http
-- @inject Microsoft.AspNetCore.Http.IHttpContextAccessor accessor
-- @{
--     ViewData["Title"] = "About";
-- }
-- <h1>About‹</h1>
-- <h3>@accessor .HttpContext.Session.GetString("MyKey")</h3>
-- @*<h3>@ViewBag-Data</h3>*@

========================================================================================================================================================

AJAX Method
-------------------------------------------------------
• The ajax) method is used to perform an AJAX (asynchronous HTTP) request.
• It can call any action method of the controller.
• It can pass values to action parameters from the view.
• It can get the response from the action method and display it on the view.
• All these actions happen without page reload.

Syntax AJAX Method
-------------------------------------------------------
-- s.ajax( {
-- type: 'POST', // http method 
-- url: '@Url.Action("Add"), // URL to hit
-- data: {num1: x, num2: y }, // data to submit
-- dataType: 'text', 
-- success: function (data, status, xhr) 
--     alert(data);
-- }, 
-- error: function (req, textStatus, errorMessage) {
--     alert(errorMessage);
-- }
========================================================================================================================================================
------------------------------------------------------------------------WEB API-------------------------------------------------------------------------
## ASP.NET CORE WEB API | The Complete Guide
-- https://www.udemy.com/course/the-complete-guide-to-aspnet-web-api/?referralCode=9ABCB407460A099020BD&couponCode=NVDPRODIN35  
========================================================================================================================================================
## Api (Application Programming Interface)
-------------------------------------------------------
## As per Wikipedia's Definition of API: In computer programming, (API) is a set of subroutine definitions, 
    protocols, and tools for building software and applications.
## HTTP PROTOCOL
## HTTP VERBS
## GET POST PUT DELETE 

## The HTTP Protocol is utilized by Web API, a concept that is used to increase an application's capabilities.
## A web-based application alone is no longer sufficient to reach all of its users or clients.

## Web API is an application programming interface (API) that is used to enable communication or interaction with software components with each other.
## Web API is the enhanced form of the web application to provide services on different devices like laptop, mobile, and others.

## ASP.NET Core Web API is a framework developed by Microsoft that allows you to build and create RESTful APIs (Application Programming Interfaces) using the ASP.NET Core platform.

## It's designed to facilitate the development of lightweight, fast, and efficient APls that can be consumed by various clients, such as web applications, mobile apps, or other services.
## Web API allows users to access a particular resource using HTTP protocol. 
## We can build Web API using different technologies like NET, PHP, JAVA, PYTHON etc 
## In . Net Microsoft has created a framework for web API called ASP.NET Core WEB API.
## ASP.NET Core Web API is a framewor makes it easy to build HTTP web services (Restful HTTP services).


## It is provided by Dot Net Framework.
## That web services reaches a broad range of clients, including browser, mobile applications, Desktop application and IOTs.
## It is very similar to ASP.NET MVC since it contains the MVC features.

## Web APl is a programming interface/application type that provides communication or interaction between software applications.
## Web APl is often used to provide an interface for web sites and client applications to have data access.
## Web APis can be used to access data from a database and save data back to the database.


## RESTFUL Architecture:
-------------------------------------------------------
## ASP.NET Core Web API follows the principles of Representational State Transfer (REST).
## It uses HTTP methods like GET, POST, PUT, and DELETE to interact with resources identified by URLs (Uniform Resource Locators).

## Rest Stands for "Representational state transfer". 
## Its introduce in 2000 by Roy Fielding.
## In REST architecture, a REST Server simply provides access to resources and the REST client accesses and presents the resources.
## Here each resource is identified by URIs! lobal IDs.

## A resource is any information that has name like image, entity, document etc. 
## REST uses various representations to represent a resource like Text, JSON and XML.
## JSON is now the most popular format being used in Web Services.

## A Restful system consists of:
## client who requests for the resources.
## server who has the resources.

## REST architectural pattern specifies a set of constraints that a system adhere to.
1. Uniform Interface
2. Client Server
3. Stateless
4. Cacheable
5. Layered system
6. Code on demand

## ControllerBase
-------------------------------------------------------
## The ControllerBase class is a base class for controllers in ASP.NET Core that handles HTTP requests. 
## It provides a set of common properties and methods controllers use to handle HTTP requests and generate HTTP responses.

## [ApiController] attribute
-------------------------------------------------------
## The [ApiController] attribute enables a few features including attribute routing requirement, 
    automatic model validation and binding source parameter inference.

## StringContent class
-------------------------------------------------------
## StringContent class creates a formatted text appropriate for the http server/client communication.
## After a client request, a server will respond with a HttpResponseMessage and that response will need a content, that can be created with the StringContent class.

## Authentication
-------------------------------------------------------
## Authentication is process of checking the identity of the user that accessing our application.

## Authorization
-------------------------------------------------------
## Authorization is process of validating privileges to access a resource of the application.
## After successful login to the application (authentication), authorization mechanism checks whether login user has privileges to access the application resource.

## Identity Framework
-------------------------------------------------------
## ASP.NET Core Identity is a built-in membership system.
## It is used to Create, Read, Update and Delete User Accounts.
## Account Information. 
## Authentication & Authorization
## Password Recovery
## Two factor authentication with SMS.
## It supports External Login Providers like Microsoft, Facebook, Google Gmail etc.
## ASP.Net Core provides identity membership system that enable us to add login functionality to our application.
## It is an API that supports User Interface (Ul) Login Functionality.
## Manage users, password, profile data, roles, tokens, email confirmation.
## And much more



========================================================================================================================================================
## Status Code
-------------------------------------------------------
• Status code are issued from the server and they gives the information about the responses.
• All HTTP response status code are divided into five (5) categories.
• 1xx - Informational response
• 2xx - Successful
• 3xx - Redirection
• 4xx - Client error
• 5xx - Server error

## Frequently used Status code
-------------------------------------------------------
• 200 OK
• 201 New Resource created
- 204 No content (The server processed the request successfully and it is not returning any content)
• 301 Moved permanently
• 302 Moved temporarily
• 400 Bad request
• 401 Unauthorized
• 404 Not found
• 405 Method not allowed
• 500 Internal server error
• 503 Service unavailable (ex - down for maintenance)


## constraints for RESTful API
-------------------------------------------------------
## RESTful Get URLS
----------------------------
## Gets a list of all the employees
-- Get + domain.com/employees
## Gets the details of a single employee
-- Get + domain.com/employees/{employeeld}
## Gets the account details of a single employee
-- Get + domain.com/employees/{emploveeld}//accounts
## Gets the single account details of a single employee
-- Get + domain.com/employees/{employeeld}/accounts/{accountld}

## RESTful Post URLS
----------------------------
## Body: Employee object
## Adds a new employee
-- Post + domain.com/employees

## Body: Account object
## Adds a new account for the employee
-- Post + domain.com/employees/{employeeld}/accounts


## RESTful Put URLS
----------------------------
## Body: Employee object
## Updated the employee
-- Put + domain.com/employees/{employeeld}

## Body: Account object
## Updates the specific account for a specific employee
-- Put + domain.com/employees/{employeeld}/accounts/{accountld}

## RESTful Delete URLS
----------------------------
## Deletes the employee
-- Delete + domain.com/employees/{employeeld}

## Deletes the specific account for a specific employee
-- Delete + domain.com/employees/{employeeld}//accounts/{account/d}

========================================================================================================================================================

## model binder
-------------------------------------------------------
• URL
    • Route
    • Query string
• Header
• Body
• Form-Data
• etc.
• The process of binding the HTTP Request data to the parameters of application Controllers or Properties is known as Model Binding.
• There are lots of built-in methods and attributes for model binder.
• We can also create the custom model binder.

## [BindProperty] is use to bind property(or model property) with controller
## example
--------------------
-- [BindProperty]
-- public StudentModel Student{ get; set; }
-- [HttpPost]
-- public IActionResult AddStudent()
-- {
--     return Ok($"Id = {Student.Id},"+ $"Name = {Student.Name},"+$"Gender = {Student.Gender},");
-- }

-- [BindProperty(SupportsGet=true)]  ## for allow get request

## BindProperties
-------------------------------------------------------
## BindProperties is an attribute and it is used to map the incoming form-data to the public properties.
## BindProperties works on simple (int, string, etc) and complex data objects.
## By default the BindProperties does not work for HTTPGET request.
## BindProperties is applied on the controller lavel.

## the order of passing data using querie string is doesn't metter

## [FromQuery]
-------------------------------------------------------
## The FromQuery attribute is used to bind the data available in query string.
## THE [FromQuery] attribute force to bind  the data only from query string
## Example: http://localhost:8700/api/countries?name=India&area=30

## [FromRoute]
-------------------------------------------------------
## The FromRoute attribute is used to bind the data available in route (URL).
## THE [FromRoute] attribute force to bind  the data only from route
## Example: htto://localhost:8700/api/employees/2/departments/3

## we can also pass multiple attributes
## controller.cs
-------------------------
-- [HttpPost ("{id}" )]
-- public IActionResult AddCountry([FromRoute]int id, [FromForm]CountryModel model)
-- {
--     return Ok($"Name = {model. Name}");
-- }

## same as other 
-------------------------------------------------------
-- [FromForm] 
## THE [FromRoute] attribute force to bind  the data only from Form-data
-- [FromHeader]
## THE [FromRoute] attribute force to bind  the data only from Header

## custom model binder
-------------------------------------------------------
## example 1
## CustomBinder.cs
-----------------------
-- public class CustomBinder : IModelBinder
-- {
--     public Task BindModelAsync(ModelBindingContext bindingContext)
--     {
--         var data = bindingContext.HttpContext.Request.Query;
--         var result = data.TryGetValue("states",out var states);
--         if (result)
--         {
--             var myArray=states.ToString().Split(',');
--             bindingContext.Result=ModelBindingResult.Success(myArray);
--         }
--         return Task.CompletedTask;
--     }
-- }

## StateController.cs
-----------------------
-- [HttpGet]
-- public IActionResult States([ModelBinder(typeof(CustomBinder))] string[] states)
-- {
--     return Ok(states);
-- }

## example 2
-------------------------------------------------------
## CustomBinderStateDetails.cs
-----------------------
public class CustomBinderStateDetails : IModelBinder
{
    public Task BindModelAsync(ModelBindingContext bindingContext)
    {
        var modelName= bindingContext.ModelName;
        var value = bindingContext.ValueProvider.GetValue(modelName);
        var result = value.FirstValue;

        if(!int.TryParse(result,out var id))
        {
            return Task.CompletedTask;
        }

        var model = new StateModel()
        {
            Id = id,
            Name = "Gujrat",
            Population = 5000
        };

        bindingContext.Result = ModelBindingResult.Success(model);
        return Task.CompletedTask;
    }
}

## StateController.cs
-----------------------
-- [HttpGet("{id}")]
-- public IActionResult GetStateDetails([ModelBinder(Name="Id")]StateModel state)
-- {
--     return Ok(state);
-- }
========================================================================================================================================================
## Dependency Injection
-------------------------------------------------------
## The main concept behind Dependency Injection (DI) is to implement IOC (Inversion of control).
## IOC means to have loosely coupling in the code.
## Unit Testing

## How to configure the DI
-------------------------
## Asp. Net Core framework provides the built-in support for DI.
## Dependency are registered in containers, and the container in asp.net core is IServiceProvider.
## Services are registered in the Startup.ConfigureServices method of the application.

## LifeTime of Services in DI
-------------------------
## Singleton
## Scoped
## Transient

## Singleton
-------------------------------------------------------
## Singleton services can be registered using AddSingleton<> method.
## There will be only one instance of the Singleton service throughout the application.
## The instance of the Singleton service will be create at every time when we restart an application

## example
-------------------------
## IStudentRepository
-------------------------
-- public interface IStudentRepository
-- {
--     int AddStudent(StudentModel student);
--     List<StudentModel> GetStudents();
-- }

## StudentRepository.cs
-------------------------
-- public class StudentRepository : IStudentRepository
-- {
--     private List<StudentModel> students = new List<StudentModel>();
--     public List<StudentModel> GetStudents() { return students; }
--     public int AddStudent(StudentModel student)
--     {
--         student.Id = students.Count + 1;
--         students.Add(student);
--         return student.Id;
--     }
-- }

## StudentCOntroller.cs
-------------------------
-- public IActionResult AddStudent(StudentModel student)
-- {
--     _studentRepository.AddStudent(student);
--     List<StudentModel> students = _studentRepository.GetStudents();
--     return Ok(students);
-- }

## program.cs
-------------------------
-- builder.Services.AddSingleton<IStudentRepository, StudentRepository>();  ## Dependency Injection

## Scoped
-------------------------------------------------------
## Scoped services can be registered using AddScoped<> method.
## A new instance of the service will be created for every new HTTP Request.
## if you create multiple instances then both of they have the same instance for the same HttpRequest
## they can interact with each other for the same HttpRequest

## program.cs
-------------------------
-- builder.Services.AddScoped<IStudentRepository, StudentRepository>();  ## Dependency Injection

## Transient
-------------------------------------------------------
## Transient services can be registered using AddTransient<> method.
## A new instance of the service will be created every-time it is requested.
## Example: Lets say Controller A is using a Transient service S 3 times in same HTTP Request, then there will be 3 separate instances of this S service.

## if you create multiple instances then both of they have there different instance
## they cann't interact with each other

## program.cs
-------------------------
-- builder.Services.AddTransient<IStudentRepository, StudentRepository>();  ## Dependency Injection

## TryAddScoped, TryAddSingleton, TryAddTransient
-------------------------------------------------------
## If we are registering the dependency using AddScoped, AddSingleton or AddTransient method then they will replace the 
    service in the collection if it has already been registered in the container.
## Now If we use the Try version like TryAddScoped then it will only register the service if it was not registered earlier. 
    In case service was already registered then the TryAddScoped will skip the registration for that service.

## we can resolve the dependency directly at the action method 
## to do that we use [FromService] attribute at the parameter
## example
-------------------------
-- [HttpGet("")]
-- public IActionResult GetName([FromServices] IProductRepository _productRepository)
-- {
--     var name = _productRepository.GetName();
--     return Ok(name);    
-- }
========================================================================================================================================================
## What is Entity Framework Core
-------------------------------------------------------
## Entity Framework Core is an Open-source framework from Microsoft that works as a bridge in between the application and the database.
## The Entity framework Core is compatible with any dot net application and any RDBMS.
## Entity framework Core is the Microsoft's official technology to interact with the RDBMS.

How Entity Framework Core works
-------------------------------------------------------
## Entity Framework Core is an O/RM and works on the object-oriented perspective.
## This means all the tables are converted into C# classes and the corresponding columns are converted as the properties of the classes

========================================================================================================================================================
## HTTP Patch installation
-------------------------------------------------------
## nned to install this two package to use http patch method
## the patch method is use to update only specific column in the database it dont update all column by default
-- dotnet add package Microsoft.AspNetCore.JsonPatch
-- dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson



## AutoMapper
-------------------------------------------------------
step 1 : install AutoMapper.Extensions.Microsoft.DependencyInject package from NuGet Package manager
-- dotnet add package AutoMapper.Extensions.Microsoft.DependencyInject 

step 2 : add service in program.cs
-- builder.Services.AddAutoMapper(typeof(Program));

step 3 : create mapper profile globally or use at the method        ## here we use globally
-- create a folder and add a class in it

step 4 : inherit that class from Profile which is available in AutoMapper namespace
step 5 : create a constructor and initialize field
step 6 : create CreateMapper to map model
-- CreateMap<Books,BookModel>();

step 7 : map where you want to return
-- _mapper.Map<List<BookModel>>(books);
## here 'BookModel' is return type and 'books' is type witch we want to map


## Identity Core
-------------------------------------------------------
• Identity Core is an open-source framework and supported by Microsoft.
• Identity Core has everything that is required to work with the authentication and authorization including
• Signup, Login, Change Password, Forgot Password
• Multi factor authentication
• Login with third party app like Google, Facebook, Microsoft etc


## Steps to use identity framework
-------------------------------------------------------
step 1 : install Microsoft.AspNetCore.Identity.EntityFrameworkCore package from NuGet package manager
-- dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore 
step 2 : create a new BookStoreUser class in model folder and inherit from IdentityUser             ## you want to use only default properties
step 3 : create properties is you require to add any ## you don't need to create a class if         ## skip this two step '2' and '3' 
step 4 : inherit your DBContext class from IdentityDbContext and pass User class in it
-- example BookStoreDBContext:IdentityDbContext<BookStoreUser>
step 5 : register identity services in pipeline  ## program.cs file
-- builder.Services.AddIdentity<BookStoreUser, IdentityRole>().AddEntityFrameworkStores<BookStoreDBContext>().AddDefaultTokenProviders();
step 6 : create a 'AccountRepository' repository for account and create 'IAccountRepository' interface also 
step 7 : register services into 'program.cs' file pipeline 
-- builder.Services.AddTransient<IAccountRepository, AccountRepository>();
step 8 : create controller 'AccountController'
step 9 : create SignupModel class for get require propertices
step 10 : use model validations
step 11 : create method for signup in your repsitory 'AccountRepository'
## here we don't need to create context instance insted of that we can use 'UserManager' instance in constructor
## impot namespace to use UserManager
-- using Microsoft.AspNetCore.Identity;

-- private readonly UserManager<BookStoreUser> _userManager;
-- public AccountRepository(UserManager<BookStoreUser> userManager)
-- {
--     _userManager = userManager;
-- }

-- public async Task<IdentityResult> SignUpAsync(SignUpModel signUpModel)
-- {
--     var user = new BookStoreUser()
--     {
--         FirstName = signUpModel.FirstName,
--         LastName = signUpModel.LastName,
--         Email = signUpModel.Email,
--         UserName = signUpModel.Email,
--     };
--     return await _userManager.CreateAsync(user, signUpModel.Password);
-- } 

step 12 : create method in controller class
## AccountController.cs
-----------------------
-- [Route("api/[controller]")]
-- [ApiController]
-- public class AccountController : ControllerBase
-- {
--     private readonly IAccountRepository _accountRepository;
-- 
--     public AccountController(IAccountRepository accountRepository)
--     {
--         _accountRepository = accountRepository;
--     }
--     [HttpPost("signup")]
--     public async Task<IActionResult> SignUp(SignUpModel signUpModel)
--     {
--         var result = await _accountRepository.SignUpAsync(signUpModel);
--         if (result.Succeeded)
--         {
--             return Ok(result);
--         }
--         return Unauthorized(result.Errors);
--     }
-- }

## How to secure any web api
-------------------------------------------------------
## import namespace 
-- using Microsoft.AspNetCore.Authorization;
## add '[Authorize]' attribute at controller lavel in controller
## you can also use at action lavel
-- [Authorize]
## Add 'UseAuthentication' middleware in pipeline ## program.cs
-- app.UseAuthentication();

## JWT Token
-------------------------------------------------------
step 1 : install 'Microsoft.AspNetCore.Authentication.JwtBearer' package from NuGet package manager
-- dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer  ## CLI

step 2 : Add key in configuration setting appsettings.json
-- "JWT": {
--   "ValidAudience": "User",                                       ## 
--   "ValidIssuer": "https://localhost:44379",                      ## add your url with port number
--   "Secret": "ThisIsMySecureWebToken123456789BookStore"           ## key must be 16 digit long
-- }

step 3 : register 'AddAuthentication' services in pipeline  ## program.cs
-- builder.Services.AddAuthentication(option =>
-- {
--     option.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;                       ## using Microsoft.AspNetCore.Authentication.JwtBearer;
--     option.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;                              
--     option.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
-- }).AddJwtBearer(option =>
-- {
--     option.SaveToken = true;
--     option.RequireHttpsMetadata = true;
--     option.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters()
--     {
--         ValidateIssuer = true,
--         ValidateAudience = true,
--         ValidAudience = config["JWT:ValidAudience"],
--         ValidIssuer = config["JWT:ValidIssuer"],
--         IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(config["JWT:Secret"]))
--     };
-- });

step 4 : add 'UseAuthentication' middleware in configuration method
-- app.UseAuthentication();

step 5 : create 'SignInManager' object and initialize in constructor
-- SignInManager<BookStoreUser> signInManager 

step 6 : create method for signin in Repository 'AccountRepository'
## AccountRepository.cs
-----------------------
-- public async Task<string> SignInAsync(SignInModel signInModel)
-- {
--     var result = await _signInManager.PasswordSignInAsync(signInModel.Email, signInModel.Password, false, false);
--     if(!result.Succeeded)
--     {
--         return null;
--     }
--     var authClaims = new List<Claim>
--     {
--         new Claim(ClaimTypes.Name,signInModel.Email),
--         new Claim(JwtRegisteredClaimNames.Jti,Guid.NewGuid().ToString())
--     };
--     var authSigninKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(_configuration["JWT:Secret"]));
--     var token = new JwtSecurityToken(
--         issuer: _configuration["JWT:ValidIssuer"],
--         audience: _configuration["JWT:ValidAudience"],
--         expires:DateTime.Now.AddDays(1),
--         claims:authClaims,
--         signingCredentials:new SigningCredentials(authSigninKey,SecurityAlgorithms.HmacSha256Signature)
--         );
--     return new JwtSecurityTokenHandler().WriteToken(token);
-- } 

step 7 : create method in controller also 
AccountController.cs
-----------------------
-- [HttpPost("signin")]
-- public async Task<IActionResult> SignIn(SignInModel signInModel)
-- {
--     var result = await _accountRepository.SignInAsync(signInModel);
--     if (result == null)
--     {
--         return Unauthorized();
--     }
--     return Ok(result);
-- }

step 8 : Add 'Authorize' key word to secorure other web api ## where you want to verify user is login or not
-- [Authorize]                  ## you can add at controller lavel or action lavel 

========================================================================================================================================================
## create roles in pipeline ## program.cs
-------------------------------------------------------
-- using (var scope = app.Services.CreateScope())
-- {
--     var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
--     var roles = new[] { "Admin", "User"};
-- 
--     foreach (var role in roles)
--     {
--         if (!await roleManager.RoleExistsAsync(role))
--         {
--             await roleManager.CreateAsync(new IdentityRole(role));
--         }
--     }
-- }
## asign role to user
-- await userManager.AddToRoleAsync(user, "Admin");

========================================================================================================================================================
## send email 
-------------------------------------------------------
## Add configuration  (mailtrap.com)
-----------------------
-- "EmailSettings": {
--   "SenderEmail": "no-replay@LibraryManagement.com",
--   "SmtpUsername": "7e07d211c11626",
--   "SmtpPassword": "8432cad36b3ebd",
--   "SenderName": "Head of the department",
--   "SmtpServer": "sandbox.smtp.mailtrap.io",
--   "SmtpPort": 587,
--   "EnableSSL": true,
--   "UseDefaultCredentioals": true,
--   "IsBodyHTML": true
-- }

## create EmailMessage Model
-----------------------
namespace BookStore.Model
{
    public class EmailMessage
    {
        public string ToEmails { get; set; }
        public string Subject { get; set; }
        public string Body { get; set; }
    }
}

## create htmp response file in your project
-----------------------
-- <!DOCTYPE html>
-- <html>
-- <head>
--     <meta charset="utf-8" />
--     <title></title>
-- </head>
-- <body>
--     Hello from email         ## email body
-- </body>
-- </html>



## create Email Interface
-----------------------
-- public interface IEmailRepository
-- {
--     Task SendEmailMessage(EmailMessage emailMessage);
-- }

## implement Email Interface
-----------------------
-- public class EmailRepository : IEmailRepository
-- {
--     private const string templatePath = @"EmailTemplate/{0}.html";
--     private readonly SMTPConfiguration _smtpconfig;
--     private readonly IConfiguration _configuration;-- 
--     public EmailRepository(IOptions<SMTPConfiguration> smtpconfig,IConfiguration configuration)
--     {
--         _smtpconfig = smtpconfig.Value;
--         _configuration = configuration;
--     }
--     public async Task SendEmailMessage(EmailMessage emailMessage)
--     {
--         emailMessage.Subject = "Email Message from BookStore";
--         emailMessage.Body = GetEmailBody("TestEmail");
--         await SendEmail(emailMessage);
--     }
--     private string GetEmailBody(string tempemailName)
--     {
--         var body = File.ReadAllText(string.Format(templatePath, tempemailName));
--         return body;
--     }
--     private async Task SendEmail(EmailMessage emailMessage)
--     {
--         MailMessage mailMessage = new MailMessage
--         {
--             Subject = emailMessage.Subject,
--             Body = emailMessage.Body,
--             From = new MailAddress(_smtpconfig.SenderEmail, _smtpconfig.SenderName),
--             IsBodyHtml = _smtpconfig.IsBodyHTML
--         };
--         //// for multiple email sending
--         //foreach(var toEmail in emailMessage.ToEmails)
--         //{
--         //    mailMessage.To.Add(toEmail);
--         //}
--         mailMessage.To.Add(emailMessage.ToEmails);
--         NetworkCredential networkCredential = new NetworkCredential(_smtpconfig.SmtpUsername, _smtpconfig.SmtpPassword);-- 
--         SmtpClient smtpClient = new SmtpClient
--         {
--             Host = _smtpconfig.SmtpServer,
--             Port = _smtpconfig.SmtpPort,
--             EnableSsl = _smtpconfig.EnableSSL,
--             Credentials = networkCredential
--         };
--         mailMessage.BodyEncoding = Encoding.Default;
--         await smtpClient.SendMailAsync(mailMessage);
--     }
-- }

## create method in controller
-----------------------
-- [HttpPost("sendemail")]
-- public async Task<IActionResult> SendEmail(EmailMessage emailMessage)
-- {
--     await _emailRepository.SendEmailMessage(emailMessage);
--     return Ok();
-- }

## Add DependencyInject
-----------------------
-- builder.Services.AddTransient<IEmailRepository, EmailRepository>();
-- builder.Services.Configure<SMTPConfiguration>(builder.Configuration.GetSection("EmailSettings"));
========================================================================================================================================================







## Use of SQL Server
-------------------------------------------------------
• SQL Server is a DBMS and provide the complete environment to save and work with the data of application.
• SQL Server stores the data in form of tables.
• We can also create relationship in between the tables.
• You can use SQL Server from any other server or from your local system.

Remember me
-------------------------------------------------------
-- JWT Token 
xUnit
-- AJAX jquery 
plugin for Validation
LINQ
payment intigration

consume web api
-- SP
Trigger
View
Case


i want to create a project on campush requirements management system in asp.net core web api.
in that i want to create 4 module Admin, University, Company, Student.
Admin can manage University,Company.
university can register / login functionality.
University can add student, manage Student, approve student job apply.
company can register/login functionality.
Company can apply for campush placement in university.
with required information.
student can also login functionality.
where student can apply any job if eligible.
student can message hr.
student can create resume, modify and download in pdf formate.

from this information give me all require table with their constraints for this project and also with the relation witch table to connect with witch table.
is posible to manage all login register to a single give me proper solution.
